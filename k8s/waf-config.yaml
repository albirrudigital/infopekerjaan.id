apiVersion: v1
kind: ConfigMap
metadata:
  name: waf-config
data:
  cloudflare_api_token: "${CLOUDFLARE_API_TOKEN}"
  cloudflare_zone_id: "${CLOUDFLARE_ZONE_ID}"
  waf_rules: |
    {
      "rules": [
        {
          "id": "100000",
          "description": "SQL Injection Protection",
          "expression": "http.request.uri.path matches \"^/api/.*\" and any(http.request.headers.values[*] contains \"'\" or http.request.uri.query contains \"'\" or http.request.body contains \"'\")",
          "action": "block"
        },
        {
          "id": "100001",
          "description": "XSS Protection",
          "expression": "http.request.uri.path matches \"^/api/.*\" and any(http.request.headers.values[*] contains \"<script>\" or http.request.uri.query contains \"<script>\" or http.request.body contains \"<script>\")",
          "action": "block"
        },
        {
          "id": "100002",
          "description": "Rate Limiting",
          "expression": "rate(http.request.uri.path, 1m) > 100",
          "action": "block"
        },
        {
          "id": "100003",
          "description": "Bot Protection",
          "expression": "cf.bot_management.score < 30",
          "action": "challenge"
        }
      ]
    }
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflare-tunnel
  annotations:
    cloudflare.com/tunnel-id: "${CLOUDFLARE_TUNNEL_ID}"
    cloudflare.com/credentials-secret: "cloudflare-credentials"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: websocket
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-credentials
type: Opaque
data:
  cloudflare_api_token: "${CLOUDFLARE_API_TOKEN_BASE64}"
  cloudflare_tunnel_token: "${CLOUDFLARE_TUNNEL_TOKEN_BASE64}" 